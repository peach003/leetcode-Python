class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {')': '(', ']': '[', '}': '{'}  # 右括号 -> 左括号

        for char in s:
            if char in mapping.values():  # 左括号
                stack.append(char)
            elif char in mapping:  # 右括号
                if not stack or stack[-1] != mapping[char]:
                    return False
                stack.pop()
            else:
                return False  # 非法字符（本题不会出现）

        return not stack
    # =========================================================
# Stack (栈) 定义与用法
# ---------------------------------------------------------
# - 栈是一种 先进后出（LIFO, Last In First Out） 的数据结构
# - 常用操作：
#   push（入栈）：stack.append(x)
#   pop（出栈）： stack.pop()        # 移除并返回栈顶元素
#   peek（查看栈顶）：stack[-1]
# - 在括号匹配中：
#   1. 遇到左括号 → 入栈
#   2. 遇到右括号 → 检查栈顶是否匹配，匹配则出栈，否则返回 False
# ---------------------------------------------------------
#
# 右括号作为 key，左括号作为 value 的逻辑原因
# ---------------------------------------------------------
# mapping = {')': '(', ']': '[', '}': '{'}
# - 在遍历字符串时，如果遇到右括号，可以直接通过字典查询
#   它对应的左括号： mapping[char]
# - 与栈顶元素比较，如果不相等 → 返回 False
# - 优点：匹配逻辑简单，查找是 O(1)
# - 如果反过来（左括号做 key），需要先出栈再查找对应右括号
# ---------------------------------------------------------
#
# Python 字典调用键和值
# ---------------------------------------------------------
# d = {')': '(', ']': '[', '}': '{'}
# - 取值（通过 key 找 value）：d[')']   # '('
# - 取所有 key：d.keys()                # dict_keys([')', ']', '}'])
# - 取所有 value：d.values()            # dict_values(['(', '[', '{'])
# - 判断是否是 key：')' in d            # True
# - 判断是否是 value：'(' in d.values() # True
# ---------------------------------------------------------
#
# not 运算符
# ---------------------------------------------------------
# - 逻辑非运算符：not 表示取反
# - 在布尔上下文中：
#   not True  -> False
#   not False -> True
# - 在容器类型（list, dict, str 等）中：
#   空容器视为 False，非空容器视为 True
#   not []  -> True   # 空列表
#   not [1] -> False  # 非空列表
# - 在括号匹配中：return not stack
#   栈为空（所有括号已匹配）→ True
#   栈非空（有未匹配括号） → False
# =========================================================

